// This defines the top-level structure of a template
template = { SOI ~ (literal | moustache)* ~ EOI }

// A literal is any character that is not part of a moustache expression
literal = @{ (!"{{" ~ ANY)+ }

// A moustache expression is enclosed in {{ ... }}
moustache = { "{{" ~ expression ~ "}}" }

// An expression can be a function call or a variable
expression = { function_call | variable }

// A function call has an identifier and a list of arguments in parentheses
function_call = { identifier ~ "(" ~ (argument ~ ("," ~ argument)*)? ~ ")" }

// An argument is currently just a string literal
argument = { expression | literal_string }

// A variable is a dot-separated chain of identifiers
variable = { identifier ~ ("." ~ identifier)* }

// A literal string can be single or double quoted.
literal_string = { single_quoted_string | double_quoted_string }

single_quoted_string = { "'" ~ single_quoted_inner ~ "'" }
single_quoted_inner  = @{ (!"'" ~ ANY)* }

// The rule for a double-quoted string. It captures the inner content.
double_quoted_string = { "\"" ~ double_quoted_inner ~ "\"" }
double_quoted_inner  = @{ (!"\"" ~ ANY)* }

// An identifier is a valid variable or function name
identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }

// Whitespace is ignored between tokens within moustaches
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }